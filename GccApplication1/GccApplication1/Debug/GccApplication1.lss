
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d7e  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e8  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000800  00000000  00000000  00001f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006f9  00000000  00000000  00002d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000344f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 80 00 	jmp	0x100	; 0x100 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	98 00       	.word	0x0098	; ????
  56:	b1 00       	.word	0x00b1	; ????
  58:	ca 00       	.word	0x00ca	; ????
  5a:	e3 00       	.word	0x00e3	; ????
  5c:	fb 00       	.word	0x00fb	; ????
  5e:	fb 00       	.word	0x00fb	; ????
  60:	fb 00       	.word	0x00fb	; ????
  62:	fb 00       	.word	0x00fb	; ????
  64:	fb 00       	.word	0x00fb	; ????
  66:	fb 00       	.word	0x00fb	; ????
  68:	fb 00       	.word	0x00fb	; ????
  6a:	fb 00       	.word	0x00fb	; ????
  6c:	fb 00       	.word	0x00fb	; ????
  6e:	fb 00       	.word	0x00fb	; ????
  70:	fb 00       	.word	0x00fb	; ????
  72:	fb 00       	.word	0x00fb	; ????
  74:	fb 00       	.word	0x00fb	; ????
  76:	fb 00       	.word	0x00fb	; ????
  78:	fb 00       	.word	0x00fb	; ????
  7a:	fb 00       	.word	0x00fb	; ????
  7c:	fb 00       	.word	0x00fb	; ????
  7e:	fb 00       	.word	0x00fb	; ????
  80:	fb 00       	.word	0x00fb	; ????
  82:	fb 00       	.word	0x00fb	; ????
  84:	fb 00       	.word	0x00fb	; ????
  86:	fb 00       	.word	0x00fb	; ????
  88:	fb 00       	.word	0x00fb	; ????
  8a:	fb 00       	.word	0x00fb	; ????
  8c:	fb 00       	.word	0x00fb	; ????
  8e:	fb 00       	.word	0x00fb	; ????
  90:	fb 00       	.word	0x00fb	; ????
  92:	fb 00       	.word	0x00fb	; ????
  94:	98 00       	.word	0x0098	; ????
  96:	b1 00       	.word	0x00b1	; ????
  98:	ca 00       	.word	0x00ca	; ????
  9a:	e3 00       	.word	0x00e3	; ????
  9c:	83 01       	movw	r16, r6
  9e:	73 01       	movw	r14, r6
  a0:	73 01       	movw	r14, r6
  a2:	73 01       	movw	r14, r6
  a4:	80 01       	movw	r16, r0
  a6:	73 01       	movw	r14, r6
  a8:	73 01       	movw	r14, r6
  aa:	73 01       	movw	r14, r6
  ac:	73 01       	movw	r14, r6
  ae:	73 01       	movw	r14, r6
  b0:	89 01       	movw	r16, r18
  b2:	73 01       	movw	r14, r6
  b4:	73 01       	movw	r14, r6
  b6:	73 01       	movw	r14, r6
  b8:	73 01       	movw	r14, r6
  ba:	73 01       	movw	r14, r6
  bc:	86 01       	movw	r16, r12
  be:	8c 01       	movw	r16, r24
  c0:	73 01       	movw	r14, r6
  c2:	73 01       	movw	r14, r6
  c4:	73 01       	movw	r14, r6
  c6:	73 01       	movw	r14, r6
  c8:	73 01       	movw	r14, r6
  ca:	73 01       	movw	r14, r6
  cc:	73 01       	movw	r14, r6
  ce:	73 01       	movw	r14, r6
  d0:	73 01       	movw	r14, r6
  d2:	73 01       	movw	r14, r6
  d4:	73 01       	movw	r14, r6
  d6:	73 01       	movw	r14, r6
  d8:	73 01       	movw	r14, r6
  da:	73 01       	movw	r14, r6
  dc:	83 01       	movw	r16, r6
  de:	73 01       	movw	r14, r6
  e0:	73 01       	movw	r14, r6
  e2:	73 01       	movw	r14, r6
  e4:	80 01       	movw	r16, r0
  e6:	73 01       	movw	r14, r6
  e8:	73 01       	movw	r14, r6
  ea:	73 01       	movw	r14, r6
  ec:	73 01       	movw	r14, r6
  ee:	73 01       	movw	r14, r6
  f0:	89 01       	movw	r16, r18
  f2:	73 01       	movw	r14, r6
  f4:	73 01       	movw	r14, r6
  f6:	73 01       	movw	r14, r6
  f8:	73 01       	movw	r14, r6
  fa:	73 01       	movw	r14, r6
  fc:	86 01       	movw	r16, r12
  fe:	8c 01       	movw	r16, r24

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf e5       	ldi	r28, 0x5F	; 95
 106:	d8 e0       	ldi	r29, 0x08	; 8
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
 110:	0c 94 1a 04 	jmp	0x834	; 0x834 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <DIO_write>:
	default: break;
	}
}

void DIO_write(char port, char pin, char val){
	switch(port){
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	e1 54       	subi	r30, 0x41	; 65
 11e:	f1 09       	sbc	r31, r1
 120:	e4 32       	cpi	r30, 0x24	; 36
 122:	f1 05       	cpc	r31, r1
 124:	08 f0       	brcs	.+2      	; 0x128 <DIO_write+0x10>
 126:	67 c0       	rjmp	.+206    	; 0x1f6 <DIO_write+0xde>
 128:	e6 5d       	subi	r30, 0xD6	; 214
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	0c 94 14 04 	jmp	0x828	; 0x828 <__tablejump2__>
		case 'A':
		case 'a':
		
		if(val == 1){
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_write+0x32>
			SET_BIT(PORTA, pin);
 134:	2b b3       	in	r18, 0x1b	; 27
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_write+0x28>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_write+0x24>
 144:	82 2b       	or	r24, r18
 146:	8b bb       	out	0x1b, r24	; 27
 148:	08 95       	ret
		}else{
			CLR_BIT(PORTA, pin);
 14a:	2b b3       	in	r18, 0x1b	; 27
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_write+0x3e>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_write+0x3a>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(val == 1){
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	59 f4       	brne	.+22     	; 0x17c <DIO_write+0x64>
			SET_BIT(PORTB, pin);
 166:	28 b3       	in	r18, 0x18	; 24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_write+0x5a>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_write+0x56>
 176:	82 2b       	or	r24, r18
 178:	88 bb       	out	0x18, r24	; 24
 17a:	08 95       	ret
		}else{
			CLR_BIT(PORTB, pin);
 17c:	28 b3       	in	r18, 0x18	; 24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_write+0x70>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_write+0x6c>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(val == 1){
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	59 f4       	brne	.+22     	; 0x1ae <DIO_write+0x96>
			SET_BIT(PORTC, pin);
 198:	25 b3       	in	r18, 0x15	; 21
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_write+0x8c>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_write+0x88>
 1a8:	82 2b       	or	r24, r18
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	08 95       	ret
		}else{
			CLR_BIT(PORTC, pin);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_write+0xa2>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_write+0x9e>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(val == 1){
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_write+0xc8>
			SET_BIT(PORTD, pin);
 1ca:	22 b3       	in	r18, 0x12	; 18
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_write+0xbe>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_write+0xba>
 1da:	82 2b       	or	r24, r18
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	08 95       	ret
		}else{
			CLR_BIT(PORTD, pin);
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write+0xd4>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write+0xd0>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	08 95       	ret

000001f8 <MOTOR_Init>:
#define F_CPU 1000000UL
#include <util/delay.h>


void MOTOR_Init(){
	DDRA = 0xFF;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 1fc:	87 bb       	out	0x17, r24	; 23
	
	DIO_write('D', EN_FRONT_LEFT, 1);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	66 e0       	ldi	r22, 0x06	; 6
 202:	84 e4       	ldi	r24, 0x44	; 68
 204:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('D', EN_REAR_LEFT, 1);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	84 e4       	ldi	r24, 0x44	; 68
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('D', EN_FRONT_RIGHT, 1);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	84 e4       	ldi	r24, 0x44	; 68
 218:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('D', EN_REAR_RIGHT, 1);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	84 e4       	ldi	r24, 0x44	; 68
 222:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
 226:	08 95       	ret

00000228 <move_forward>:
}

void move_forward(void) {
	
	DIO_write('A', MOTOR_FL_FWD, 1);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('A', MOTOR_RL_FWD, 1);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	
	DIO_write('B', MOTOR_FR_FWD, 1);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('B', MOTOR_RR_FWD, 1);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	82 e4       	ldi	r24, 0x42	; 66
 24c:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
 250:	08 95       	ret

00000252 <move_backward>:
}

void move_backward(void) {
	
	DIO_write('A', MOTOR_FL_BCK, 1);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e4       	ldi	r24, 0x41	; 65
 258:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('A', MOTOR_RL_BCK, 1);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	
	DIO_write('B', MOTOR_FR_BCK, 1);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	82 e4       	ldi	r24, 0x42	; 66
 26c:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('B', MOTOR_RR_BCK, 1);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	82 e4       	ldi	r24, 0x42	; 66
 276:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
 27a:	08 95       	ret

0000027c <turn_left>:
}

void turn_left(void) {

	DIO_write('A', MOTOR_FL_BCK, 1);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('A', MOTOR_RL_BCK, 1);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	
	DIO_write('B', MOTOR_FR_FWD, 1);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('B', MOTOR_RR_FWD, 1);
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	82 e4       	ldi	r24, 0x42	; 66
 2a0:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
 2a4:	08 95       	ret

000002a6 <turn_right>:
}

void turn_right(void) {

	DIO_write('A', MOTOR_FL_FWD, 1);
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('A',  MOTOR_RL_FWD, 1);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	81 e4       	ldi	r24, 0x41	; 65
 2b6:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	
	DIO_write('B', MOTOR_FR_BCK, 1);
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
	DIO_write('B', MOTOR_RR_BCK, 1);
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	82 e4       	ldi	r24, 0x42	; 66
 2ca:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_write>
 2ce:	08 95       	ret

000002d0 <stop>:
}

void stop(void) {
	PORTA = 0x00;
 2d0:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
 2d2:	18 ba       	out	0x18, r1	; 24
 2d4:	08 95       	ret

000002d6 <main>:
#include "direction_speed.h"
#include "usart.h"

int main(void)
{
	USART_Init(9600);  
 2d6:	60 e8       	ldi	r22, 0x80	; 128
 2d8:	75 e2       	ldi	r23, 0x25	; 37
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 8f 01 	call	0x31e	; 0x31e <USART_Init>
	MOTOR_Init();
 2e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <MOTOR_Init>
    
    while (1) 
    {
		unsigned char val = USART_RxChar();
 2e6:	0e 94 b3 01 	call	0x366	; 0x366 <USART_RxChar>

		switch(val){
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	e2 54       	subi	r30, 0x42	; 66
 2f0:	f1 09       	sbc	r31, r1
 2f2:	e2 33       	cpi	r30, 0x32	; 50
 2f4:	f1 05       	cpc	r31, r1
 2f6:	b8 f7       	brcc	.-18     	; 0x2e6 <main+0x10>
 2f8:	e2 5b       	subi	r30, 0xB2	; 178
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	0c 94 14 04 	jmp	0x828	; 0x828 <__tablejump2__>
			
			case 'F':
			case 'f':
			move_forward();
 300:	0e 94 14 01 	call	0x228	; 0x228 <move_forward>
			break;
 304:	f0 cf       	rjmp	.-32     	; 0x2e6 <main+0x10>
			
			case 'B':
			case 'b':
			move_backward();
 306:	0e 94 29 01 	call	0x252	; 0x252 <move_backward>
			break;	
 30a:	ed cf       	rjmp	.-38     	; 0x2e6 <main+0x10>
			
			case 'R':
			case 'r':
			turn_right();
 30c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turn_right>
			break;
 310:	ea cf       	rjmp	.-44     	; 0x2e6 <main+0x10>
			
			case 'L':
			case 'l':
			turn_left();
 312:	0e 94 3e 01 	call	0x27c	; 0x27c <turn_left>
			break;
 316:	e7 cf       	rjmp	.-50     	; 0x2e6 <main+0x10>

			case 'S':
			case 's':
			stop();
 318:	0e 94 68 01 	call	0x2d0	; 0x2d0 <stop>
			break;
 31c:	e4 cf       	rjmp	.-56     	; 0x2e6 <main+0x10>

0000031e <USART_Init>:
#include "usart.h"

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	#ifdef DOUBLE_SPEED_MODE
	UCSRA |=(1 << U2X);
 31e:	59 9a       	sbi	0x0b, 1	; 11
	#endif
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
 320:	2a b1       	in	r18, 0x0a	; 10
 322:	28 69       	ori	r18, 0x98	; 152
 324:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
 326:	20 b5       	in	r18, 0x20	; 32
 328:	26 68       	ori	r18, 0x86	; 134
 32a:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 32c:	0e 94 cc 02 	call	0x598	; 0x598 <__floatunsisf>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	51 e4       	ldi	r21, 0x41	; 65
 338:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulsf3>
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	74 e2       	ldi	r23, 0x24	; 36
 344:	84 e7       	ldi	r24, 0x74	; 116
 346:	99 e4       	ldi	r25, 0x49	; 73
 348:	0e 94 24 02 	call	0x448	; 0x448 <__divsf3>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e8       	ldi	r20, 0x80	; 128
 352:	5f e3       	ldi	r21, 0x3F	; 63
 354:	0e 94 b7 01 	call	0x36e	; 0x36e <__subsf3>
 358:	0e 94 c7 03 	call	0x78e	; 0x78e <round>
 35c:	0e 94 96 02 	call	0x52c	; 0x52c <__fixsfsi>
 360:	69 b9       	out	0x09, r22	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 362:	70 bd       	out	0x20, r23	; 32
 364:	08 95       	ret

00000366 <USART_RxChar>:
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
 366:	5f 9b       	sbis	0x0b, 7	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <USART_RxChar>
	return(UDR);									/* Get and return received data */
 36a:	8c b1       	in	r24, 0x0c	; 12
}
 36c:	08 95       	ret

0000036e <__subsf3>:
 36e:	50 58       	subi	r21, 0x80	; 128

00000370 <__addsf3>:
 370:	bb 27       	eor	r27, r27
 372:	aa 27       	eor	r26, r26
 374:	0e 94 cf 01 	call	0x39e	; 0x39e <__addsf3x>
 378:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_round>
 37c:	0e 94 12 03 	call	0x624	; 0x624 <__fp_pscA>
 380:	38 f0       	brcs	.+14     	; 0x390 <__addsf3+0x20>
 382:	0e 94 19 03 	call	0x632	; 0x632 <__fp_pscB>
 386:	20 f0       	brcs	.+8      	; 0x390 <__addsf3+0x20>
 388:	39 f4       	brne	.+14     	; 0x398 <__addsf3+0x28>
 38a:	9f 3f       	cpi	r25, 0xFF	; 255
 38c:	19 f4       	brne	.+6      	; 0x394 <__addsf3+0x24>
 38e:	26 f4       	brtc	.+8      	; 0x398 <__addsf3+0x28>
 390:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_nan>
 394:	0e f4       	brtc	.+2      	; 0x398 <__addsf3+0x28>
 396:	e0 95       	com	r30
 398:	e7 fb       	bst	r30, 7
 39a:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>

0000039e <__addsf3x>:
 39e:	e9 2f       	mov	r30, r25
 3a0:	0e 94 31 03 	call	0x662	; 0x662 <__fp_split3>
 3a4:	58 f3       	brcs	.-42     	; 0x37c <__addsf3+0xc>
 3a6:	ba 17       	cp	r27, r26
 3a8:	62 07       	cpc	r22, r18
 3aa:	73 07       	cpc	r23, r19
 3ac:	84 07       	cpc	r24, r20
 3ae:	95 07       	cpc	r25, r21
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__addsf3x+0x1c>
 3b2:	79 f4       	brne	.+30     	; 0x3d2 <__addsf3x+0x34>
 3b4:	a6 f5       	brtc	.+104    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3b6:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_zero>
 3ba:	0e f4       	brtc	.+2      	; 0x3be <__addsf3x+0x20>
 3bc:	e0 95       	com	r30
 3be:	0b 2e       	mov	r0, r27
 3c0:	ba 2f       	mov	r27, r26
 3c2:	a0 2d       	mov	r26, r0
 3c4:	0b 01       	movw	r0, r22
 3c6:	b9 01       	movw	r22, r18
 3c8:	90 01       	movw	r18, r0
 3ca:	0c 01       	movw	r0, r24
 3cc:	ca 01       	movw	r24, r20
 3ce:	a0 01       	movw	r20, r0
 3d0:	11 24       	eor	r1, r1
 3d2:	ff 27       	eor	r31, r31
 3d4:	59 1b       	sub	r21, r25
 3d6:	99 f0       	breq	.+38     	; 0x3fe <__addsf3x+0x60>
 3d8:	59 3f       	cpi	r21, 0xF9	; 249
 3da:	50 f4       	brcc	.+20     	; 0x3f0 <__addsf3x+0x52>
 3dc:	50 3e       	cpi	r21, 0xE0	; 224
 3de:	68 f1       	brcs	.+90     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3e0:	1a 16       	cp	r1, r26
 3e2:	f0 40       	sbci	r31, 0x00	; 0
 3e4:	a2 2f       	mov	r26, r18
 3e6:	23 2f       	mov	r18, r19
 3e8:	34 2f       	mov	r19, r20
 3ea:	44 27       	eor	r20, r20
 3ec:	58 5f       	subi	r21, 0xF8	; 248
 3ee:	f3 cf       	rjmp	.-26     	; 0x3d6 <__addsf3x+0x38>
 3f0:	46 95       	lsr	r20
 3f2:	37 95       	ror	r19
 3f4:	27 95       	ror	r18
 3f6:	a7 95       	ror	r26
 3f8:	f0 40       	sbci	r31, 0x00	; 0
 3fa:	53 95       	inc	r21
 3fc:	c9 f7       	brne	.-14     	; 0x3f0 <__addsf3x+0x52>
 3fe:	7e f4       	brtc	.+30     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 400:	1f 16       	cp	r1, r31
 402:	ba 0b       	sbc	r27, r26
 404:	62 0b       	sbc	r22, r18
 406:	73 0b       	sbc	r23, r19
 408:	84 0b       	sbc	r24, r20
 40a:	ba f0       	brmi	.+46     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 40c:	91 50       	subi	r25, 0x01	; 1
 40e:	a1 f0       	breq	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 410:	ff 0f       	add	r31, r31
 412:	bb 1f       	adc	r27, r27
 414:	66 1f       	adc	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	c2 f7       	brpl	.-16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41e:	ba 0f       	add	r27, r26
 420:	62 1f       	adc	r22, r18
 422:	73 1f       	adc	r23, r19
 424:	84 1f       	adc	r24, r20
 426:	48 f4       	brcc	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 428:	87 95       	ror	r24
 42a:	77 95       	ror	r23
 42c:	67 95       	ror	r22
 42e:	b7 95       	ror	r27
 430:	f7 95       	ror	r31
 432:	9e 3f       	cpi	r25, 0xFE	; 254
 434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	b0 cf       	rjmp	.-160    	; 0x398 <__addsf3+0x28>
 438:	93 95       	inc	r25
 43a:	88 0f       	add	r24, r24
 43c:	08 f0       	brcs	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	99 27       	eor	r25, r25
 440:	ee 0f       	add	r30, r30
 442:	97 95       	ror	r25
 444:	87 95       	ror	r24
 446:	08 95       	ret

00000448 <__divsf3>:
 448:	0e 94 38 02 	call	0x470	; 0x470 <__divsf3x>
 44c:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_round>
 450:	0e 94 19 03 	call	0x632	; 0x632 <__fp_pscB>
 454:	58 f0       	brcs	.+22     	; 0x46c <__divsf3+0x24>
 456:	0e 94 12 03 	call	0x624	; 0x624 <__fp_pscA>
 45a:	40 f0       	brcs	.+16     	; 0x46c <__divsf3+0x24>
 45c:	29 f4       	brne	.+10     	; 0x468 <__divsf3+0x20>
 45e:	5f 3f       	cpi	r21, 0xFF	; 255
 460:	29 f0       	breq	.+10     	; 0x46c <__divsf3+0x24>
 462:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 466:	51 11       	cpse	r21, r1
 468:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_szero>
 46c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_nan>

00000470 <__divsf3x>:
 470:	0e 94 31 03 	call	0x662	; 0x662 <__fp_split3>
 474:	68 f3       	brcs	.-38     	; 0x450 <__divsf3+0x8>

00000476 <__divsf3_pse>:
 476:	99 23       	and	r25, r25
 478:	b1 f3       	breq	.-20     	; 0x466 <__divsf3+0x1e>
 47a:	55 23       	and	r21, r21
 47c:	91 f3       	breq	.-28     	; 0x462 <__divsf3+0x1a>
 47e:	95 1b       	sub	r25, r21
 480:	55 0b       	sbc	r21, r21
 482:	bb 27       	eor	r27, r27
 484:	aa 27       	eor	r26, r26
 486:	62 17       	cp	r22, r18
 488:	73 07       	cpc	r23, r19
 48a:	84 07       	cpc	r24, r20
 48c:	38 f0       	brcs	.+14     	; 0x49c <__divsf3_pse+0x26>
 48e:	9f 5f       	subi	r25, 0xFF	; 255
 490:	5f 4f       	sbci	r21, 0xFF	; 255
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	44 1f       	adc	r20, r20
 498:	aa 1f       	adc	r26, r26
 49a:	a9 f3       	breq	.-22     	; 0x486 <__divsf3_pse+0x10>
 49c:	35 d0       	rcall	.+106    	; 0x508 <__divsf3_pse+0x92>
 49e:	0e 2e       	mov	r0, r30
 4a0:	3a f0       	brmi	.+14     	; 0x4b0 <__divsf3_pse+0x3a>
 4a2:	e0 e8       	ldi	r30, 0x80	; 128
 4a4:	32 d0       	rcall	.+100    	; 0x50a <__divsf3_pse+0x94>
 4a6:	91 50       	subi	r25, 0x01	; 1
 4a8:	50 40       	sbci	r21, 0x00	; 0
 4aa:	e6 95       	lsr	r30
 4ac:	00 1c       	adc	r0, r0
 4ae:	ca f7       	brpl	.-14     	; 0x4a2 <__divsf3_pse+0x2c>
 4b0:	2b d0       	rcall	.+86     	; 0x508 <__divsf3_pse+0x92>
 4b2:	fe 2f       	mov	r31, r30
 4b4:	29 d0       	rcall	.+82     	; 0x508 <__divsf3_pse+0x92>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	bb 1f       	adc	r27, r27
 4be:	26 17       	cp	r18, r22
 4c0:	37 07       	cpc	r19, r23
 4c2:	48 07       	cpc	r20, r24
 4c4:	ab 07       	cpc	r26, r27
 4c6:	b0 e8       	ldi	r27, 0x80	; 128
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__divsf3_pse+0x56>
 4ca:	bb 0b       	sbc	r27, r27
 4cc:	80 2d       	mov	r24, r0
 4ce:	bf 01       	movw	r22, r30
 4d0:	ff 27       	eor	r31, r31
 4d2:	93 58       	subi	r25, 0x83	; 131
 4d4:	5f 4f       	sbci	r21, 0xFF	; 255
 4d6:	3a f0       	brmi	.+14     	; 0x4e6 <__divsf3_pse+0x70>
 4d8:	9e 3f       	cpi	r25, 0xFE	; 254
 4da:	51 05       	cpc	r21, r1
 4dc:	78 f0       	brcs	.+30     	; 0x4fc <__divsf3_pse+0x86>
 4de:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 4e2:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_szero>
 4e6:	5f 3f       	cpi	r21, 0xFF	; 255
 4e8:	e4 f3       	brlt	.-8      	; 0x4e2 <__divsf3_pse+0x6c>
 4ea:	98 3e       	cpi	r25, 0xE8	; 232
 4ec:	d4 f3       	brlt	.-12     	; 0x4e2 <__divsf3_pse+0x6c>
 4ee:	86 95       	lsr	r24
 4f0:	77 95       	ror	r23
 4f2:	67 95       	ror	r22
 4f4:	b7 95       	ror	r27
 4f6:	f7 95       	ror	r31
 4f8:	9f 5f       	subi	r25, 0xFF	; 255
 4fa:	c9 f7       	brne	.-14     	; 0x4ee <__divsf3_pse+0x78>
 4fc:	88 0f       	add	r24, r24
 4fe:	91 1d       	adc	r25, r1
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret
 508:	e1 e0       	ldi	r30, 0x01	; 1
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	bb 1f       	adc	r27, r27
 512:	62 17       	cp	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	ba 07       	cpc	r27, r26
 51a:	20 f0       	brcs	.+8      	; 0x524 <__divsf3_pse+0xae>
 51c:	62 1b       	sub	r22, r18
 51e:	73 0b       	sbc	r23, r19
 520:	84 0b       	sbc	r24, r20
 522:	ba 0b       	sbc	r27, r26
 524:	ee 1f       	adc	r30, r30
 526:	88 f7       	brcc	.-30     	; 0x50a <__divsf3_pse+0x94>
 528:	e0 95       	com	r30
 52a:	08 95       	ret

0000052c <__fixsfsi>:
 52c:	0e 94 9d 02 	call	0x53a	; 0x53a <__fixunssfsi>
 530:	68 94       	set
 532:	b1 11       	cpse	r27, r1
 534:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_szero>
 538:	08 95       	ret

0000053a <__fixunssfsi>:
 53a:	0e 94 39 03 	call	0x672	; 0x672 <__fp_splitA>
 53e:	88 f0       	brcs	.+34     	; 0x562 <__fixunssfsi+0x28>
 540:	9f 57       	subi	r25, 0x7F	; 127
 542:	98 f0       	brcs	.+38     	; 0x56a <__fixunssfsi+0x30>
 544:	b9 2f       	mov	r27, r25
 546:	99 27       	eor	r25, r25
 548:	b7 51       	subi	r27, 0x17	; 23
 54a:	b0 f0       	brcs	.+44     	; 0x578 <__fixunssfsi+0x3e>
 54c:	e1 f0       	breq	.+56     	; 0x586 <__fixunssfsi+0x4c>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	1a f0       	brmi	.+6      	; 0x55e <__fixunssfsi+0x24>
 558:	ba 95       	dec	r27
 55a:	c9 f7       	brne	.-14     	; 0x54e <__fixunssfsi+0x14>
 55c:	14 c0       	rjmp	.+40     	; 0x586 <__fixunssfsi+0x4c>
 55e:	b1 30       	cpi	r27, 0x01	; 1
 560:	91 f0       	breq	.+36     	; 0x586 <__fixunssfsi+0x4c>
 562:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_zero>
 566:	b1 e0       	ldi	r27, 0x01	; 1
 568:	08 95       	ret
 56a:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_zero>
 56e:	67 2f       	mov	r22, r23
 570:	78 2f       	mov	r23, r24
 572:	88 27       	eor	r24, r24
 574:	b8 5f       	subi	r27, 0xF8	; 248
 576:	39 f0       	breq	.+14     	; 0x586 <__fixunssfsi+0x4c>
 578:	b9 3f       	cpi	r27, 0xF9	; 249
 57a:	cc f3       	brlt	.-14     	; 0x56e <__fixunssfsi+0x34>
 57c:	86 95       	lsr	r24
 57e:	77 95       	ror	r23
 580:	67 95       	ror	r22
 582:	b3 95       	inc	r27
 584:	d9 f7       	brne	.-10     	; 0x57c <__fixunssfsi+0x42>
 586:	3e f4       	brtc	.+14     	; 0x596 <__fixunssfsi+0x5c>
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <__floatunsisf>:
 598:	e8 94       	clt
 59a:	09 c0       	rjmp	.+18     	; 0x5ae <__floatsisf+0x12>

0000059c <__floatsisf>:
 59c:	97 fb       	bst	r25, 7
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__floatsisf+0x12>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	99 23       	and	r25, r25
 5b0:	a9 f0       	breq	.+42     	; 0x5dc <__floatsisf+0x40>
 5b2:	f9 2f       	mov	r31, r25
 5b4:	96 e9       	ldi	r25, 0x96	; 150
 5b6:	bb 27       	eor	r27, r27
 5b8:	93 95       	inc	r25
 5ba:	f6 95       	lsr	r31
 5bc:	87 95       	ror	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f1 11       	cpse	r31, r1
 5c6:	f8 cf       	rjmp	.-16     	; 0x5b8 <__floatsisf+0x1c>
 5c8:	fa f4       	brpl	.+62     	; 0x608 <__floatsisf+0x6c>
 5ca:	bb 0f       	add	r27, r27
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__floatsisf+0x36>
 5ce:	60 ff       	sbrs	r22, 0
 5d0:	1b c0       	rjmp	.+54     	; 0x608 <__floatsisf+0x6c>
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	16 c0       	rjmp	.+44     	; 0x608 <__floatsisf+0x6c>
 5dc:	88 23       	and	r24, r24
 5de:	11 f0       	breq	.+4      	; 0x5e4 <__floatsisf+0x48>
 5e0:	96 e9       	ldi	r25, 0x96	; 150
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <__floatsisf+0x6a>
 5e4:	77 23       	and	r23, r23
 5e6:	21 f0       	breq	.+8      	; 0x5f0 <__floatsisf+0x54>
 5e8:	9e e8       	ldi	r25, 0x8E	; 142
 5ea:	87 2f       	mov	r24, r23
 5ec:	76 2f       	mov	r23, r22
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <__floatsisf+0x5e>
 5f0:	66 23       	and	r22, r22
 5f2:	71 f0       	breq	.+28     	; 0x610 <__floatsisf+0x74>
 5f4:	96 e8       	ldi	r25, 0x86	; 134
 5f6:	86 2f       	mov	r24, r22
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	2a f0       	brmi	.+10     	; 0x608 <__floatsisf+0x6c>
 5fe:	9a 95       	dec	r25
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	da f7       	brpl	.-10     	; 0x5fe <__floatsisf+0x62>
 608:	88 0f       	add	r24, r24
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <__fp_inf>:
 612:	97 f9       	bld	r25, 7
 614:	9f 67       	ori	r25, 0x7F	; 127
 616:	80 e8       	ldi	r24, 0x80	; 128
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	08 95       	ret

0000061e <__fp_nan>:
 61e:	9f ef       	ldi	r25, 0xFF	; 255
 620:	80 ec       	ldi	r24, 0xC0	; 192
 622:	08 95       	ret

00000624 <__fp_pscA>:
 624:	00 24       	eor	r0, r0
 626:	0a 94       	dec	r0
 628:	16 16       	cp	r1, r22
 62a:	17 06       	cpc	r1, r23
 62c:	18 06       	cpc	r1, r24
 62e:	09 06       	cpc	r0, r25
 630:	08 95       	ret

00000632 <__fp_pscB>:
 632:	00 24       	eor	r0, r0
 634:	0a 94       	dec	r0
 636:	12 16       	cp	r1, r18
 638:	13 06       	cpc	r1, r19
 63a:	14 06       	cpc	r1, r20
 63c:	05 06       	cpc	r0, r21
 63e:	08 95       	ret

00000640 <__fp_round>:
 640:	09 2e       	mov	r0, r25
 642:	03 94       	inc	r0
 644:	00 0c       	add	r0, r0
 646:	11 f4       	brne	.+4      	; 0x64c <__fp_round+0xc>
 648:	88 23       	and	r24, r24
 64a:	52 f0       	brmi	.+20     	; 0x660 <__fp_round+0x20>
 64c:	bb 0f       	add	r27, r27
 64e:	40 f4       	brcc	.+16     	; 0x660 <__fp_round+0x20>
 650:	bf 2b       	or	r27, r31
 652:	11 f4       	brne	.+4      	; 0x658 <__fp_round+0x18>
 654:	60 ff       	sbrs	r22, 0
 656:	04 c0       	rjmp	.+8      	; 0x660 <__fp_round+0x20>
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__fp_split3>:
 662:	57 fd       	sbrc	r21, 7
 664:	90 58       	subi	r25, 0x80	; 128
 666:	44 0f       	add	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	59 f0       	breq	.+22     	; 0x682 <__fp_splitA+0x10>
 66c:	5f 3f       	cpi	r21, 0xFF	; 255
 66e:	71 f0       	breq	.+28     	; 0x68c <__fp_splitA+0x1a>
 670:	47 95       	ror	r20

00000672 <__fp_splitA>:
 672:	88 0f       	add	r24, r24
 674:	97 fb       	bst	r25, 7
 676:	99 1f       	adc	r25, r25
 678:	61 f0       	breq	.+24     	; 0x692 <__fp_splitA+0x20>
 67a:	9f 3f       	cpi	r25, 0xFF	; 255
 67c:	79 f0       	breq	.+30     	; 0x69c <__fp_splitA+0x2a>
 67e:	87 95       	ror	r24
 680:	08 95       	ret
 682:	12 16       	cp	r1, r18
 684:	13 06       	cpc	r1, r19
 686:	14 06       	cpc	r1, r20
 688:	55 1f       	adc	r21, r21
 68a:	f2 cf       	rjmp	.-28     	; 0x670 <__fp_split3+0xe>
 68c:	46 95       	lsr	r20
 68e:	f1 df       	rcall	.-30     	; 0x672 <__fp_splitA>
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <__fp_splitA+0x30>
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	99 1f       	adc	r25, r25
 69a:	f1 cf       	rjmp	.-30     	; 0x67e <__fp_splitA+0xc>
 69c:	86 95       	lsr	r24
 69e:	71 05       	cpc	r23, r1
 6a0:	61 05       	cpc	r22, r1
 6a2:	08 94       	sec
 6a4:	08 95       	ret

000006a6 <__fp_zero>:
 6a6:	e8 94       	clt

000006a8 <__fp_szero>:
 6a8:	bb 27       	eor	r27, r27
 6aa:	66 27       	eor	r22, r22
 6ac:	77 27       	eor	r23, r23
 6ae:	cb 01       	movw	r24, r22
 6b0:	97 f9       	bld	r25, 7
 6b2:	08 95       	ret

000006b4 <__mulsf3>:
 6b4:	0e 94 6d 03 	call	0x6da	; 0x6da <__mulsf3x>
 6b8:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_round>
 6bc:	0e 94 12 03 	call	0x624	; 0x624 <__fp_pscA>
 6c0:	38 f0       	brcs	.+14     	; 0x6d0 <__mulsf3+0x1c>
 6c2:	0e 94 19 03 	call	0x632	; 0x632 <__fp_pscB>
 6c6:	20 f0       	brcs	.+8      	; 0x6d0 <__mulsf3+0x1c>
 6c8:	95 23       	and	r25, r21
 6ca:	11 f0       	breq	.+4      	; 0x6d0 <__mulsf3+0x1c>
 6cc:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 6d0:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_nan>
 6d4:	11 24       	eor	r1, r1
 6d6:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_szero>

000006da <__mulsf3x>:
 6da:	0e 94 31 03 	call	0x662	; 0x662 <__fp_split3>
 6de:	70 f3       	brcs	.-36     	; 0x6bc <__mulsf3+0x8>

000006e0 <__mulsf3_pse>:
 6e0:	95 9f       	mul	r25, r21
 6e2:	c1 f3       	breq	.-16     	; 0x6d4 <__mulsf3+0x20>
 6e4:	95 0f       	add	r25, r21
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	55 1f       	adc	r21, r21
 6ea:	62 9f       	mul	r22, r18
 6ec:	f0 01       	movw	r30, r0
 6ee:	72 9f       	mul	r23, r18
 6f0:	bb 27       	eor	r27, r27
 6f2:	f0 0d       	add	r31, r0
 6f4:	b1 1d       	adc	r27, r1
 6f6:	63 9f       	mul	r22, r19
 6f8:	aa 27       	eor	r26, r26
 6fa:	f0 0d       	add	r31, r0
 6fc:	b1 1d       	adc	r27, r1
 6fe:	aa 1f       	adc	r26, r26
 700:	64 9f       	mul	r22, r20
 702:	66 27       	eor	r22, r22
 704:	b0 0d       	add	r27, r0
 706:	a1 1d       	adc	r26, r1
 708:	66 1f       	adc	r22, r22
 70a:	82 9f       	mul	r24, r18
 70c:	22 27       	eor	r18, r18
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	62 1f       	adc	r22, r18
 714:	73 9f       	mul	r23, r19
 716:	b0 0d       	add	r27, r0
 718:	a1 1d       	adc	r26, r1
 71a:	62 1f       	adc	r22, r18
 71c:	83 9f       	mul	r24, r19
 71e:	a0 0d       	add	r26, r0
 720:	61 1d       	adc	r22, r1
 722:	22 1f       	adc	r18, r18
 724:	74 9f       	mul	r23, r20
 726:	33 27       	eor	r19, r19
 728:	a0 0d       	add	r26, r0
 72a:	61 1d       	adc	r22, r1
 72c:	23 1f       	adc	r18, r19
 72e:	84 9f       	mul	r24, r20
 730:	60 0d       	add	r22, r0
 732:	21 1d       	adc	r18, r1
 734:	82 2f       	mov	r24, r18
 736:	76 2f       	mov	r23, r22
 738:	6a 2f       	mov	r22, r26
 73a:	11 24       	eor	r1, r1
 73c:	9f 57       	subi	r25, 0x7F	; 127
 73e:	50 40       	sbci	r21, 0x00	; 0
 740:	9a f0       	brmi	.+38     	; 0x768 <__mulsf3_pse+0x88>
 742:	f1 f0       	breq	.+60     	; 0x780 <__mulsf3_pse+0xa0>
 744:	88 23       	and	r24, r24
 746:	4a f0       	brmi	.+18     	; 0x75a <__mulsf3_pse+0x7a>
 748:	ee 0f       	add	r30, r30
 74a:	ff 1f       	adc	r31, r31
 74c:	bb 1f       	adc	r27, r27
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	91 50       	subi	r25, 0x01	; 1
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	a9 f7       	brne	.-22     	; 0x744 <__mulsf3_pse+0x64>
 75a:	9e 3f       	cpi	r25, 0xFE	; 254
 75c:	51 05       	cpc	r21, r1
 75e:	80 f0       	brcs	.+32     	; 0x780 <__mulsf3_pse+0xa0>
 760:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 764:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_szero>
 768:	5f 3f       	cpi	r21, 0xFF	; 255
 76a:	e4 f3       	brlt	.-8      	; 0x764 <__mulsf3_pse+0x84>
 76c:	98 3e       	cpi	r25, 0xE8	; 232
 76e:	d4 f3       	brlt	.-12     	; 0x764 <__mulsf3_pse+0x84>
 770:	86 95       	lsr	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f7 95       	ror	r31
 77a:	e7 95       	ror	r30
 77c:	9f 5f       	subi	r25, 0xFF	; 255
 77e:	c1 f7       	brne	.-16     	; 0x770 <__mulsf3_pse+0x90>
 780:	fe 2b       	or	r31, r30
 782:	88 0f       	add	r24, r24
 784:	91 1d       	adc	r25, r1
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret

0000078e <round>:
 78e:	0e 94 39 03 	call	0x672	; 0x672 <__fp_splitA>
 792:	e8 f0       	brcs	.+58     	; 0x7ce <round+0x40>
 794:	9e 37       	cpi	r25, 0x7E	; 126
 796:	e8 f0       	brcs	.+58     	; 0x7d2 <round+0x44>
 798:	96 39       	cpi	r25, 0x96	; 150
 79a:	b8 f4       	brcc	.+46     	; 0x7ca <round+0x3c>
 79c:	9e 38       	cpi	r25, 0x8E	; 142
 79e:	48 f4       	brcc	.+18     	; 0x7b2 <round+0x24>
 7a0:	67 2f       	mov	r22, r23
 7a2:	78 2f       	mov	r23, r24
 7a4:	88 27       	eor	r24, r24
 7a6:	98 5f       	subi	r25, 0xF8	; 248
 7a8:	f9 cf       	rjmp	.-14     	; 0x79c <round+0xe>
 7aa:	86 95       	lsr	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	93 95       	inc	r25
 7b2:	95 39       	cpi	r25, 0x95	; 149
 7b4:	d0 f3       	brcs	.-12     	; 0x7aa <round+0x1c>
 7b6:	b6 2f       	mov	r27, r22
 7b8:	b1 70       	andi	r27, 0x01	; 1
 7ba:	6b 0f       	add	r22, r27
 7bc:	71 1d       	adc	r23, r1
 7be:	81 1d       	adc	r24, r1
 7c0:	20 f4       	brcc	.+8      	; 0x7ca <round+0x3c>
 7c2:	87 95       	ror	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	93 95       	inc	r25
 7ca:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_mintl>
 7ce:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_mpack>
 7d2:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_szero>

000007d6 <__fp_mintl>:
 7d6:	88 23       	and	r24, r24
 7d8:	71 f4       	brne	.+28     	; 0x7f6 <__fp_mintl+0x20>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__fp_mintl+0x10>
 7de:	98 50       	subi	r25, 0x08	; 8
 7e0:	87 2b       	or	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <__fp_mintl+0x1e>
 7e6:	66 23       	and	r22, r22
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__fp_mintl+0x18>
 7ea:	99 27       	eor	r25, r25
 7ec:	0d c0       	rjmp	.+26     	; 0x808 <__fp_mintl+0x32>
 7ee:	90 51       	subi	r25, 0x10	; 16
 7f0:	86 2b       	or	r24, r22
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	2a f0       	brmi	.+10     	; 0x802 <__fp_mintl+0x2c>
 7f8:	9a 95       	dec	r25
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	da f7       	brpl	.-10     	; 0x7f8 <__fp_mintl+0x22>
 802:	88 0f       	add	r24, r24
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_mpack>:
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	31 f0       	breq	.+12     	; 0x81c <__fp_mpack_finite+0xc>

00000810 <__fp_mpack_finite>:
 810:	91 50       	subi	r25, 0x01	; 1
 812:	20 f4       	brcc	.+8      	; 0x81c <__fp_mpack_finite+0xc>
 814:	87 95       	ror	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b7 95       	ror	r27
 81c:	88 0f       	add	r24, r24
 81e:	91 1d       	adc	r25, r1
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

00000828 <__tablejump2__>:
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	05 90       	lpm	r0, Z+
 82e:	f4 91       	lpm	r31, Z
 830:	e0 2d       	mov	r30, r0
 832:	09 94       	ijmp

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
